import type { GetRunExec, GetRunExecStruct, GetRunScript, GetRunScriptStruct } from './commands';
import { type GetPackageInfo } from './package';
export type PackageManagerName = 'npm' | 'yarn' | 'pnpm' | 'bun';
/**
 * Object containing all the information and utilities regarding the current package manager
 */
export type PackageManager = {
    /** The name of the current package manager (one of `'npm'`, `'yarn'`, `'pnpm'` or `'bun'`) */
    name: PackageManagerName;
    /** The name of the package manager the project in the current directory is set up for (if any), which might
     * be different from the package manager's name in the case the package manager being used is different from
     * the one the project is supposed to be used with (e.g. if the current process is running via `npm` inside a
     * project set up using `pnpm`) */
    projectPackageManager: PackageManagerName | null;
    /** The version of the package manager */
    version: string;
    /**
     * Utility to get the information of an installed package
     *
     * @param packageName the name of the target package
     * @returns the information about the package or null if the package is not installed
     */
    getPackageInfo: GetPackageInfo;
    /**
     * Gets the command needed to run a specified script.
     *
     * @param script the script to run (e.g. `'start'`, `'lint'`, etc...)
     * @param options options Options indicating how the script should be created
     * @returns a string representing the command needed to run the script, or null if the provided input script is invalid
     */
    getRunScript: GetRunScript;
    /**
     * Gets an structured representation for the command needed to run a specified script.
     *
     * @param script the script to run (e.g. `'start'`, `'lint'`, etc...)
     * @param options Options indicating how the script should be created
     * @returns an object representing the command needed to run the script, or null if the provided input script is invalid
     */
    getRunScriptStruct: GetRunScriptStruct;
    /**
     * Gets the command needed to run a specified command from a local or remote package
     *
     * @param command the (package) command to run (e.g. `'eslint'`, `'prettier'`, etc...)
     * @param options options Options indicating how the command should be created
     * @returns a string representing the command needed to run the package command, or null if the provided input package command is invalid
     */
    getRunExec: GetRunExec;
    /**
     * Gets the command needed to run a specified command from a local or remote package
     *
     * @param command the (package) command to run (e.g. `'eslint'`, `'prettier'`, etc...)
     * @param options options Options indicating how the command should be created
     * @returns a string representing the command needed to run the package command, or null if the provided input package command is invalid
     */
    getRunExecStruct: GetRunExecStruct;
    /**
     * Set of all (reserved) command keywords for the package manager.
     *
     * For example, for npm some of such keywords are: `install`, `uninstall` and `help`, but not that
     * `npx` is not part of the set since it is a different command entirely and not a keyword used in npm (i.e. you don't run `npm npx`)
     */
    cliCommandKeywords: Set<string>;
    /**
     * Set of metadata associated to the package manager.
     */
    metadata: PackageManagerMetadata;
};
export type PackageManagerMetadata = {
    /**
     * Flag indicating whether the package manager is yarn classic (meaning that it is yarn and its version is less than 2)
     */
    isYarnClassic: boolean;
    /**
     * Flag indicating whether the package manager is yarn berry (meaning that it is yarn and its version greater than 2)
     */
    isYarnBerry: boolean;
};
/**
 * Gets the current package manager information based on the current directory
 *
 * @returns the current package manager information, or null if no package manager could be detected
 */
export declare function getPackageManager(): Promise<PackageManager | null>;
//# sourceMappingURL=packageManager.d.ts.map