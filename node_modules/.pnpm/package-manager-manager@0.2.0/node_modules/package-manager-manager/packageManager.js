import { getRunScriptFunctions as u } from "./commands/getRunScript.js";
import { getRunExecFunctions as p } from "./commands/getRunExec.js";
import { getPackageInfoFunction as l } from "./package/index.js";
import "node:fs/promises";
import "node:path";
import "node:process";
import "./utils/locks.js";
import { getPmCliCommandKeywords as y } from "./utils/cliCommands.js";
import { detectPackageManagerName as R } from "./utils/pmDetection.js";
import { shellac as S } from "./utils/shellac.js";
import "./package/bun.js";
import "shellac";
import "./package/npm.js";
import "./package/pnpm.js";
import "./package/yarn.js";
import "./utils/workspace.js";
async function f(n) {
  const { stdout: e } = await S`$ ${n} --version`;
  return e;
}
async function W() {
  const { packageManagerName: n, filesBasedPackageManager: e } = await R();
  if (n) {
    const r = n, a = await f(n), c = a.startsWith("0.") || a.startsWith("1."), o = r === "yarn" && c, t = {
      name: n,
      version: a,
      projectPackageManager: e,
      metadata: {
        isYarnClassic: o,
        isYarnBerry: r === "yarn" && !c
      },
      // initialization of dummy fields which get populated in the next steps
      cliCommandKeywords: /* @__PURE__ */ new Set(),
      getPackageInfo: async () => null,
      getRunScript: async () => null,
      getRunScriptStruct: async () => null,
      getRunExec: async () => null,
      getRunExecStruct: async () => null
    };
    t.cliCommandKeywords = y(t), t.getPackageInfo = l({
      name: r,
      version: a,
      metadata: { isYarnClassic: o }
    });
    const { getRunScript: i, getRunScriptStruct: s } = u(t), { getRunExec: g, getRunExecStruct: m } = p(t);
    return t.getRunScript = i, t.getRunScriptStruct = s, t.getRunExec = g, t.getRunExecStruct = m, t;
  }
  return null;
}
export {
  W as getPackageManager
};
//# sourceMappingURL=packageManager.js.map
