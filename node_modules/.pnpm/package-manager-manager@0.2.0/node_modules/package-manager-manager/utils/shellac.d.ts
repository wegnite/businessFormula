/// <reference types="node" />
export declare const shellac: ((s: TemplateStringsArray, ...interps: ((string | number | boolean | null | undefined) | Promise<string | number | boolean | null | undefined> | ((a: string) => void) | ((a: string) => Promise<void>) | (() => Promise<void | (string | number | boolean | null | undefined)>))[]) => Promise<{
    [key: string]: any;
    stdout: string;
    stderr: string;
}>) & {
    in: (dir: string) => ((s: TemplateStringsArray, ...interps: ((string | number | boolean | null | undefined) | Promise<string | number | boolean | null | undefined> | ((a: string) => void) | ((a: string) => Promise<void>) | (() => Promise<void | (string | number | boolean | null | undefined)>))[]) => Promise<{
        [key: string]: any;
        stdout: string;
        stderr: string;
    }>) & any;
    bg: (s: TemplateStringsArray, ...interps: ((string | number | boolean | null | undefined) | Promise<string | number | boolean | null | undefined> | ((a: string) => void) | ((a: string) => Promise<void>) | (() => Promise<void | (string | number | boolean | null | undefined)>))[]) => Promise<{
        process: import("child_process").ChildProcessWithoutNullStreams;
        pid: number;
        kill: () => void;
        promise: Promise<{
            [key: string]: any;
            stdout: string;
            stderr: string;
        }>;
    }>;
    env: (env: {
        [x: string]: any;
    }) => ((s: TemplateStringsArray, ...interps: ((string | number | boolean | null | undefined) | Promise<string | number | boolean | null | undefined> | ((a: string) => void) | ((a: string) => Promise<void>) | (() => Promise<void | (string | number | boolean | null | undefined)>))[]) => Promise<{
        [key: string]: any;
        stdout: string;
        stderr: string;
    }>) & any;
};
//# sourceMappingURL=shellac.d.ts.map