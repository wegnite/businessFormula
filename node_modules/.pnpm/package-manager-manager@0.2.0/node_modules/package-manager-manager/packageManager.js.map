{"version":3,"file":"packageManager.js","sources":["../src/packageManager.ts"],"sourcesContent":["import type { GetRunExec, GetRunExecStruct, GetRunScript, GetRunScriptStruct } from './commands';\nimport { getRunExecFunctions, getRunScriptFunctions } from './commands';\nimport { getPackageInfoFunction, type GetPackageInfo } from './package';\nimport { getPmCliCommandKeywords, detectPackageManagerName, shellac } from './utils';\n\nexport type PackageManagerName = 'npm' | 'yarn' | 'pnpm' | 'bun';\n\n/**\n * Object containing all the information and utilities regarding the current package manager\n */\nexport type PackageManager = {\n\t/** The name of the current package manager (one of `'npm'`, `'yarn'`, `'pnpm'` or `'bun'`) */\n\tname: PackageManagerName;\n\t/** The name of the package manager the project in the current directory is set up for (if any), which might\n\t * be different from the package manager's name in the case the package manager being used is different from\n\t * the one the project is supposed to be used with (e.g. if the current process is running via `npm` inside a\n\t * project set up using `pnpm`) */\n\tprojectPackageManager: PackageManagerName | null;\n\t/** The version of the package manager */\n\tversion: string;\n\t/**\n\t * Utility to get the information of an installed package\n\t *\n\t * @param packageName the name of the target package\n\t * @returns the information about the package or null if the package is not installed\n\t */\n\tgetPackageInfo: GetPackageInfo;\n\t/**\n\t * Gets the command needed to run a specified script.\n\t *\n\t * @param script the script to run (e.g. `'start'`, `'lint'`, etc...)\n\t * @param options options Options indicating how the script should be created\n\t * @returns a string representing the command needed to run the script, or null if the provided input script is invalid\n\t */\n\tgetRunScript: GetRunScript;\n\t/**\n\t * Gets an structured representation for the command needed to run a specified script.\n\t *\n\t * @param script the script to run (e.g. `'start'`, `'lint'`, etc...)\n\t * @param options Options indicating how the script should be created\n\t * @returns an object representing the command needed to run the script, or null if the provided input script is invalid\n\t */\n\tgetRunScriptStruct: GetRunScriptStruct;\n\t/**\n\t * Gets the command needed to run a specified command from a local or remote package\n\t *\n\t * @param command the (package) command to run (e.g. `'eslint'`, `'prettier'`, etc...)\n\t * @param options options Options indicating how the command should be created\n\t * @returns a string representing the command needed to run the package command, or null if the provided input package command is invalid\n\t */\n\tgetRunExec: GetRunExec;\n\t/**\n\t * Gets the command needed to run a specified command from a local or remote package\n\t *\n\t * @param command the (package) command to run (e.g. `'eslint'`, `'prettier'`, etc...)\n\t * @param options options Options indicating how the command should be created\n\t * @returns a string representing the command needed to run the package command, or null if the provided input package command is invalid\n\t */\n\tgetRunExecStruct: GetRunExecStruct;\n\t/**\n\t * Set of all (reserved) command keywords for the package manager.\n\t *\n\t * For example, for npm some of such keywords are: `install`, `uninstall` and `help`, but not that\n\t * `npx` is not part of the set since it is a different command entirely and not a keyword used in npm (i.e. you don't run `npm npx`)\n\t */\n\tcliCommandKeywords: Set<string>;\n\t/**\n\t * Set of metadata associated to the package manager.\n\t */\n\tmetadata: PackageManagerMetadata;\n};\n\nexport type PackageManagerMetadata = {\n\t/**\n\t * Flag indicating whether the package manager is yarn classic (meaning that it is yarn and its version is less than 2)\n\t */\n\tisYarnClassic: boolean;\n\t/**\n\t * Flag indicating whether the package manager is yarn berry (meaning that it is yarn and its version greater than 2)\n\t */\n\tisYarnBerry: boolean;\n};\n\nasync function getPackageManagerVersion(packageManager: PackageManagerName): Promise<string> {\n\tconst { stdout } = await shellac`$ ${packageManager} --version`;\n\treturn stdout;\n}\n\n/**\n * Gets the current package manager information based on the current directory\n *\n * @returns the current package manager information, or null if no package manager could be detected\n */\nexport async function getPackageManager(): Promise<PackageManager | null> {\n\tconst { packageManagerName, filesBasedPackageManager } = await detectPackageManagerName();\n\n\tif (packageManagerName) {\n\t\tconst name = packageManagerName;\n\t\tconst version = await getPackageManagerVersion(packageManagerName);\n\t\tconst versionMajorIs0Or1 = version.startsWith('0.') || version.startsWith('1.');\n\t\tconst isYarnClassic = name === 'yarn' && versionMajorIs0Or1;\n\t\tconst isYarnBerry = name === 'yarn' && !versionMajorIs0Or1;\n\t\tconst packageManager: PackageManager = {\n\t\t\tname: packageManagerName,\n\t\t\tversion,\n\t\t\tprojectPackageManager: filesBasedPackageManager,\n\t\t\tmetadata: {\n\t\t\t\tisYarnClassic,\n\t\t\t\tisYarnBerry,\n\t\t\t},\n\t\t\t// initialization of dummy fields which get populated in the next steps\n\t\t\tcliCommandKeywords: new Set(),\n\t\t\tgetPackageInfo: async () => null,\n\t\t\tgetRunScript: async () => null,\n\t\t\tgetRunScriptStruct: async () => null,\n\t\t\tgetRunExec: async () => null,\n\t\t\tgetRunExecStruct: async () => null,\n\t\t};\n\n\t\tpackageManager.cliCommandKeywords = getPmCliCommandKeywords(packageManager);\n\n\t\tpackageManager.getPackageInfo = getPackageInfoFunction({\n\t\t\tname,\n\t\t\tversion,\n\t\t\tmetadata: { isYarnClassic },\n\t\t});\n\n\t\tconst { getRunScript, getRunScriptStruct } = getRunScriptFunctions(packageManager);\n\n\t\tconst { getRunExec, getRunExecStruct } = getRunExecFunctions(packageManager);\n\n\t\tpackageManager.getRunScript = getRunScript;\n\t\tpackageManager.getRunScriptStruct = getRunScriptStruct;\n\n\t\tpackageManager.getRunExec = getRunExec;\n\t\tpackageManager.getRunExecStruct = getRunExecStruct;\n\n\t\treturn packageManager;\n\t}\n\n\treturn null;\n}\n"],"names":["getPackageManagerVersion","packageManager","stdout","shellac","getPackageManager","packageManagerName","filesBasedPackageManager","detectPackageManagerName","name","version","versionMajorIs0Or1","isYarnClassic","getPmCliCommandKeywords","getPackageInfoFunction","getRunScript","getRunScriptStruct","getRunScriptFunctions","getRunExec","getRunExecStruct","getRunExecFunctions"],"mappings":";;;;;;;;;;;;;;;;AAmFA,eAAeA,EAAyBC,GAAqD;AAC5F,QAAM,EAAE,QAAAC,EAAA,IAAW,MAAMC,MAAYF;AAC9B,SAAAC;AACR;AAOA,eAAsBE,IAAoD;AACzE,QAAM,EAAE,oBAAAC,GAAoB,0BAAAC,MAA6B,MAAMC,EAAyB;AAExF,MAAIF,GAAoB;AACvB,UAAMG,IAAOH,GACPI,IAAU,MAAMT,EAAyBK,CAAkB,GAC3DK,IAAqBD,EAAQ,WAAW,IAAI,KAAKA,EAAQ,WAAW,IAAI,GACxEE,IAAgBH,MAAS,UAAUE,GAEnCT,IAAiC;AAAA,MACtC,MAAMI;AAAA,MACN,SAAAI;AAAA,MACA,uBAAuBH;AAAA,MACvB,UAAU;AAAA,QACT,eAAAK;AAAA,QACA,aAPkBH,MAAS,UAAU,CAACE;AAAA,MAQvC;AAAA;AAAA,MAEA,wCAAwB,IAAI;AAAA,MAC5B,gBAAgB,YAAY;AAAA,MAC5B,cAAc,YAAY;AAAA,MAC1B,oBAAoB,YAAY;AAAA,MAChC,YAAY,YAAY;AAAA,MACxB,kBAAkB,YAAY;AAAA,IAAA;AAGhB,IAAAT,EAAA,qBAAqBW,EAAwBX,CAAc,GAE1EA,EAAe,iBAAiBY,EAAuB;AAAA,MACtD,MAAAL;AAAA,MACA,SAAAC;AAAA,MACA,UAAU,EAAE,eAAAE,EAAc;AAAA,IAAA,CAC1B;AAED,UAAM,EAAE,cAAAG,GAAc,oBAAAC,EAAmB,IAAIC,EAAsBf,CAAc,GAE3E,EAAE,YAAAgB,GAAY,kBAAAC,EAAiB,IAAIC,EAAoBlB,CAAc;AAE3E,WAAAA,EAAe,eAAea,GAC9Bb,EAAe,qBAAqBc,GAEpCd,EAAe,aAAagB,GAC5BhB,EAAe,mBAAmBiB,GAE3BjB;AAAA;AAGD,SAAA;AACR;"}