import type { PackageManager, PackageManagerMetadata } from '../packageManager';
import type { CommandExecStruct } from './CommandStruct';
/**
 * The subset of properties of PackageManager that are relevant when dealing with exec commands
 */
type PackageManagerForExec = Pick<PackageManager, 'name' | 'version' | 'getPackageInfo'> & {
    metadata: Pick<PackageManagerMetadata, 'isYarnClassic'>;
};
export type GetRunExecOptions = {
    /**
     * The arguments to pass to the command (e.g. `-h`, `--info`, etc...)
     *
     * defaults to `[]`
     */
    args: string[];
    /**
     * Wether the command represents a full command or a shortened one
     * (i.e. whether unnecessary keywords are removed/compressed or not)
     * (e.g. short format = `'npx eslint'`, long format = `'npm exec eslint'`)
     *
     * defaults to `'short'`
     */
    format: 'full' | 'short';
    /**
     * Indication of how the resulting command should be set up in regards of downloading
     * missing packages (this option does not guarantee a specific behavior as this heavily
     * relies on the underlying package manager in use)
     *
     * defaults to `'prefer-always'`
     */
    download: DownloadPreference;
};
type DownloadPreference = 'prefer-never' | 'prefer-always' | 'prefer-if-needed';
export type GetRunExec = (command: string, options?: Partial<GetRunExecOptions>) => Promise<string | null>;
export type GetRunExecStruct = (command: string, options?: Partial<GetRunExecOptions>) => Promise<CommandExecStruct | null>;
export declare function getRunExecFunctions(packageManager: PackageManagerForExec): {
    getRunExec: GetRunExec;
    getRunExecStruct: GetRunExecStruct;
};
export {};
//# sourceMappingURL=getRunExec.d.ts.map