{"version":3,"file":"getRunScript.js","sources":["../../src/commands/getRunScript.ts"],"sourcesContent":["import type { PackageManager } from '../packageManager';\nimport type { CommandScriptStruct } from './CommandStruct';\n\n/**\n * The subset of properties of PackageManager that are relevant when dealing with scripts\n */\ntype PackageManagerForScripts = Pick<PackageManager, 'name' | 'cliCommandKeywords'>;\n\nclass RunScriptStruct implements CommandScriptStruct {\n\tcmd: string;\n\n\tpmCmd?: string = undefined;\n\n\ttargetArgs: string[];\n\n\targsNeedDoubleDashes: boolean;\n\n\tconstructor(\n\t\tpackageManager: PackageManagerForScripts,\n\t\tpublic script: string,\n\t\toptions?: Partial<GetRunScriptOptions>,\n\t) {\n\t\tthis.targetArgs = options?.args ?? [];\n\n\t\tconst format = options?.format ?? 'short';\n\n\t\tthis.cmd = packageManager.name;\n\t\tconst includeRun = RunScriptStruct.#shouldRunKeywordBeIncluded(packageManager, script, format);\n\t\tif (includeRun) {\n\t\t\tthis.pmCmd = 'run';\n\t\t}\n\n\t\tthis.argsNeedDoubleDashes = ['npm', 'bun'].includes(packageManager.name);\n\t}\n\n\tget cmdArgs(): string[] {\n\t\treturn [\n\t\t\t...(this.pmCmd ? [this.pmCmd] : []),\n\t\t\tthis.script,\n\t\t\t...(this.targetArgs.length && this.argsNeedDoubleDashes ? ['--'] : []),\n\t\t\t...this.targetArgs,\n\t\t];\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.cmd}${this.pmCmd ? ` ${this.pmCmd}` : ''} ${this.script}${\n\t\t\tthis.targetArgs.length\n\t\t\t\t? `${this.argsNeedDoubleDashes ? ' --' : ''} ${this.targetArgs.join(' ')}`\n\t\t\t\t: ''\n\t\t}`;\n\t}\n\n\tstatic #shouldRunKeywordBeIncluded(\n\t\tpackageManager: PackageManagerForScripts,\n\t\tscript: string,\n\t\tformat: GetRunScriptOptions['format'],\n\t): boolean {\n\t\tif (format === 'full') return true;\n\n\t\tif (script === 'start') return false;\n\n\t\tif (packageManager.name === 'npm') return true;\n\n\t\tconst scriptCollidesWithCliKeyword = packageManager.cliCommandKeywords.has(script);\n\t\tif (scriptCollidesWithCliKeyword) return true;\n\n\t\treturn false;\n\t}\n}\n\nexport type GetRunScriptOptions = {\n\t/**\n\t * The arguments to pass to the script (e.g. `-h`, `--info`, etc...)\n\t *\n\t * defaults to `[]`\n\t */\n\targs: string[];\n\t/**\n\t * Wether the command represents a full command or a shortened one\n\t * (i.e. whether unnecessary keywords are removed or not)\n\t * (e.g. short format = `'pnpm dev'`, long format = `'pnpm run dev'`)\n\t *\n\t * defaults to `'short'`\n\t */\n\tformat: 'full' | 'short';\n};\n\nexport type GetRunScript = (\n\tscript: string,\n\toptions?: Partial<GetRunScriptOptions>,\n) => Promise<string | null>;\n\nexport type GetRunScriptStruct = (\n\tscript: string,\n\toptions?: Partial<GetRunScriptOptions>,\n) => Promise<CommandScriptStruct | null>;\n\nexport function getRunScriptFunctions(packageManager: PackageManagerForScripts): {\n\tgetRunScript: GetRunScript;\n\tgetRunScriptStruct: GetRunScriptStruct;\n} {\n\tconst getRunScriptStruct: GetRunScriptStruct = async (script, options) => {\n\t\tif (!script) return null;\n\t\treturn new RunScriptStruct(packageManager, script, options);\n\t};\n\n\tconst getRunScript: GetRunScript = async (...args) =>\n\t\t(await getRunScriptStruct(...args))?.toString() ?? null;\n\n\treturn { getRunScript, getRunScriptStruct };\n}\n"],"names":["_shouldRunKeywordBeIncluded","shouldRunKeywordBeIncluded_fn","_RunScriptStruct","packageManager","script","options","_a","format","__privateMethod","RunScriptStruct","__privateAdd","getRunScriptFunctions","getRunScriptStruct","args"],"mappings":";;;;;;;;;;AAQA,IAAAA,GAAAC;AAAA,MAAMC,IAAN,MAAqD;AAAA,EASpD,YACCC,GACOC,GACPC,GACC;AAbH,QAAAC;AAWS,SAAA,SAAAF,GARS,KAAA,QAAA,QAWX,KAAA,cAAaC,KAAA,gBAAAA,EAAS,SAAQ,CAAA;AAE7B,UAAAE,KAASF,KAAA,gBAAAA,EAAS,WAAU;AAElC,SAAK,MAAMF,EAAe,MACPK,EAAAF,IAAAJ,GAAgBF,GAAAC,GAAhB,KAAAK,GAA4CH,GAAgBC,GAAQG,OAEtF,KAAK,QAAQ,QAGd,KAAK,uBAAuB,CAAC,OAAO,KAAK,EAAE,SAASJ,EAAe,IAAI;AAAA,EACxE;AAAA,EAEA,IAAI,UAAoB;AAChB,WAAA;AAAA,MACN,GAAI,KAAK,QAAQ,CAAC,KAAK,KAAK,IAAI,CAAC;AAAA,MACjC,KAAK;AAAA,MACL,GAAI,KAAK,WAAW,UAAU,KAAK,uBAAuB,CAAC,IAAI,IAAI,CAAC;AAAA,MACpE,GAAG,KAAK;AAAA,IAAA;AAAA,EAEV;AAAA,EAEA,WAAmB;AACX,WAAA,GAAG,KAAK,MAAM,KAAK,QAAQ,IAAI,KAAK,UAAU,MAAM,KAAK,SAC/D,KAAK,WAAW,SACb,GAAG,KAAK,uBAAuB,QAAQ,MAAM,KAAK,WAAW,KAAK,GAAG,MACrE;AAAA,EAEL;AAkBD;AA5DA,IAAMM,IAANP;AA4CQF,IAAA,eAAAC,IAAA,SACNE,GACAC,GACAG,GACU;AACV,SAAIA,MAAW,SAAe,KAE1BH,MAAW,UAAgB,KAE3B,GAAAD,EAAe,SAAS,SAESA,EAAe,mBAAmB,IAAIC,CAAM;AAIlF,GAfAM,EA5CKD,GA4CET;AA6CD,SAASW,EAAsBR,GAGpC;AACK,QAAAS,IAAyC,OAAOR,GAAQC,MACxDD,IACE,IAAIK,EAAgBN,GAAgBC,GAAQC,CAAO,IADtC;AAOd,SAAA,EAAE,cAH0B,UAAUQ;AAlG9C,QAAAP;AAmGG,aAAAA,IAAA,MAAMM,EAAmB,GAAGC,CAAI,MAAhC,gBAAAP,EAAoC,eAAc;AAAA,KAE7B,oBAAAM;AACxB;"}