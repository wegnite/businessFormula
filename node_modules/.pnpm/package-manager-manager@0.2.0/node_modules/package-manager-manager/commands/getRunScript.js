var g = (e, t, s) => {
  if (!t.has(e))
    throw TypeError("Cannot " + s);
};
var l = (e, t, s) => {
  if (t.has(e))
    throw TypeError("Cannot add the same private member more than once");
  t instanceof WeakSet ? t.add(e) : t.set(e, s);
};
var m = (e, t, s) => (g(e, t, "access private method"), s);
var u, c;
const h = class {
  constructor(t, s, r) {
    var d;
    this.script = s, this.pmCmd = void 0, this.targetArgs = (r == null ? void 0 : r.args) ?? [];
    const i = (r == null ? void 0 : r.format) ?? "short";
    this.cmd = t.name, m(d = h, u, c).call(d, t, s, i) && (this.pmCmd = "run"), this.argsNeedDoubleDashes = ["npm", "bun"].includes(t.name);
  }
  get cmdArgs() {
    return [
      ...this.pmCmd ? [this.pmCmd] : [],
      this.script,
      ...this.targetArgs.length && this.argsNeedDoubleDashes ? ["--"] : [],
      ...this.targetArgs
    ];
  }
  toString() {
    return `${this.cmd}${this.pmCmd ? ` ${this.pmCmd}` : ""} ${this.script}${this.targetArgs.length ? `${this.argsNeedDoubleDashes ? " --" : ""} ${this.targetArgs.join(" ")}` : ""}`;
  }
};
let n = h;
u = new WeakSet(), c = function(t, s, r) {
  return r === "full" ? !0 : s === "start" ? !1 : !!(t.name === "npm" || t.cliCommandKeywords.has(s));
}, l(n, u);
function C(e) {
  const t = async (r, i) => r ? new n(e, r, i) : null;
  return { getRunScript: async (...r) => {
    var i;
    return ((i = await t(...r)) == null ? void 0 : i.toString()) ?? null;
  }, getRunScriptStruct: t };
}
export {
  C as getRunScriptFunctions
};
//# sourceMappingURL=getRunScript.js.map
