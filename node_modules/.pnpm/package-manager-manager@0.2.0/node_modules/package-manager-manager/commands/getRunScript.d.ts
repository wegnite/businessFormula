import type { PackageManager } from '../packageManager';
import type { CommandScriptStruct } from './CommandStruct';
/**
 * The subset of properties of PackageManager that are relevant when dealing with scripts
 */
type PackageManagerForScripts = Pick<PackageManager, 'name' | 'cliCommandKeywords'>;
export type GetRunScriptOptions = {
    /**
     * The arguments to pass to the script (e.g. `-h`, `--info`, etc...)
     *
     * defaults to `[]`
     */
    args: string[];
    /**
     * Wether the command represents a full command or a shortened one
     * (i.e. whether unnecessary keywords are removed or not)
     * (e.g. short format = `'pnpm dev'`, long format = `'pnpm run dev'`)
     *
     * defaults to `'short'`
     */
    format: 'full' | 'short';
};
export type GetRunScript = (script: string, options?: Partial<GetRunScriptOptions>) => Promise<string | null>;
export type GetRunScriptStruct = (script: string, options?: Partial<GetRunScriptOptions>) => Promise<CommandScriptStruct | null>;
export declare function getRunScriptFunctions(packageManager: PackageManagerForScripts): {
    getRunScript: GetRunScript;
    getRunScriptStruct: GetRunScriptStruct;
};
export {};
//# sourceMappingURL=getRunScript.d.ts.map