{"version":3,"file":"yarn.js","sources":["../../src/package/yarn.ts"],"sourcesContent":["import type { PackageManager, PackageManagerMetadata } from '../packageManager';\nimport { shellac } from '../utils';\nimport type { GetPackageInfo } from './index';\n\nexport function getYarnGetPackageInfoFunction(\n\tpackageManager: Pick<PackageManager, 'name' | 'version'> & {\n\t\tmetadata: Pick<PackageManagerMetadata, 'isYarnClassic'>;\n\t},\n) {\n\treturn async (...[name]: Parameters<GetPackageInfo>): ReturnType<GetPackageInfo> => {\n\t\ttry {\n\t\t\tlet version: string | undefined;\n\n\t\t\tif (packageManager.metadata.isYarnClassic) {\n\t\t\t\tconst commandOutput = (await shellac`$ yarn list pattern ${name}`).stdout;\n\n\t\t\t\tconst versionRegex = new RegExp(`^[└─\\\\s]*${name}@(\\\\S*)`, 'im');\n\t\t\t\tconst match = commandOutput.match(versionRegex);\n\t\t\t\tversion = match?.[1];\n\t\t\t} else {\n\t\t\t\tconst commandOutput = (await shellac`$ yarn why ${name}`).stdout;\n\n\t\t\t\tconst versionRegex = new RegExp(`^[└─\\\\s]*${name}@(?:\\\\S+:)?(\\\\S*)`, 'im');\n\t\t\t\tconst match = commandOutput.match(versionRegex);\n\t\t\t\tversion = match?.[1];\n\t\t\t}\n\n\t\t\tif (!version) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn { name, version };\n\t\t} catch {\n\t\t\tthrow new Error(`An error occurred while gathering the package info of \"${name}\"`);\n\t\t}\n\t};\n}\n"],"names":["getYarnGetPackageInfoFunction","packageManager","name","version","commandOutput","shellac","versionRegex","match"],"mappings":";;;;;;AAIO,SAASA,EACfC,GAGC;AACM,SAAA,UAAU,CAACC,CAAI,MAA8D;AAC/E,QAAA;AACC,UAAAC;AAEA,UAAAF,EAAe,SAAS,eAAe;AACpC,cAAAG,KAAiB,MAAMC,wBAA8BH,KAAQ,QAE7DI,IAAe,IAAI,OAAO,YAAYJ,YAAe,IAAI,GACzDK,IAAQH,EAAc,MAAME,CAAY;AAC9C,QAAAH,IAAUI,KAAA,gBAAAA,EAAQ;AAAA,aACZ;AACA,cAAAH,KAAiB,MAAMC,eAAqBH,KAAQ,QAEpDI,IAAe,IAAI,OAAO,YAAYJ,sBAAyB,IAAI,GACnEK,IAAQH,EAAc,MAAME,CAAY;AAC9C,QAAAH,IAAUI,KAAA,gBAAAA,EAAQ;AAAA;AAGnB,aAAKJ,IAIE,EAAE,MAAAD,GAAM,SAAAC,MAHP;AAAA,IAGe,QACtB;AACK,YAAA,IAAI,MAAM,0DAA0DD,IAAO;AAAA,IAClF;AAAA,EAAA;AAEF;"}