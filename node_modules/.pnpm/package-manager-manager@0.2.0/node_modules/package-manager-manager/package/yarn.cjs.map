{"version":3,"file":"yarn.cjs","sources":["../../src/package/yarn.ts"],"sourcesContent":["import type { PackageManager, PackageManagerMetadata } from '../packageManager';\nimport { shellac } from '../utils';\nimport type { GetPackageInfo } from './index';\n\nexport function getYarnGetPackageInfoFunction(\n\tpackageManager: Pick<PackageManager, 'name' | 'version'> & {\n\t\tmetadata: Pick<PackageManagerMetadata, 'isYarnClassic'>;\n\t},\n) {\n\treturn async (...[name]: Parameters<GetPackageInfo>): ReturnType<GetPackageInfo> => {\n\t\ttry {\n\t\t\tlet version: string | undefined;\n\n\t\t\tif (packageManager.metadata.isYarnClassic) {\n\t\t\t\tconst commandOutput = (await shellac`$ yarn list pattern ${name}`).stdout;\n\n\t\t\t\tconst versionRegex = new RegExp(`^[└─\\\\s]*${name}@(\\\\S*)`, 'im');\n\t\t\t\tconst match = commandOutput.match(versionRegex);\n\t\t\t\tversion = match?.[1];\n\t\t\t} else {\n\t\t\t\tconst commandOutput = (await shellac`$ yarn why ${name}`).stdout;\n\n\t\t\t\tconst versionRegex = new RegExp(`^[└─\\\\s]*${name}@(?:\\\\S+:)?(\\\\S*)`, 'im');\n\t\t\t\tconst match = commandOutput.match(versionRegex);\n\t\t\t\tversion = match?.[1];\n\t\t\t}\n\n\t\t\tif (!version) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn { name, version };\n\t\t} catch {\n\t\t\tthrow new Error(`An error occurred while gathering the package info of \"${name}\"`);\n\t\t}\n\t};\n}\n"],"names":["getYarnGetPackageInfoFunction","packageManager","name","version","commandOutput","shellac","versionRegex","match"],"mappings":"kPAIO,SAASA,EACfC,EAGC,CACM,MAAA,UAAU,CAACC,CAAI,IAA8D,CAC/E,GAAA,CACC,IAAAC,EAEA,GAAAF,EAAe,SAAS,cAAe,CACpC,MAAAG,GAAiB,MAAMC,EAAA,8BAA8BH,KAAQ,OAE7DI,EAAe,IAAI,OAAO,YAAYJ,WAAe,IAAI,EACzDK,EAAQH,EAAc,MAAME,CAAY,EAC9CH,EAAUI,GAAA,YAAAA,EAAQ,OACZ,CACA,MAAAH,GAAiB,MAAMC,EAAA,qBAAqBH,KAAQ,OAEpDI,EAAe,IAAI,OAAO,YAAYJ,qBAAyB,IAAI,EACnEK,EAAQH,EAAc,MAAME,CAAY,EAC9CH,EAAUI,GAAA,YAAAA,EAAQ,GAGnB,OAAKJ,EAIE,CAAE,KAAAD,EAAM,QAAAC,GAHP,IAGe,MACtB,CACK,MAAA,IAAI,MAAM,0DAA0DD,IAAO,CAClF,CAAA,CAEF"}