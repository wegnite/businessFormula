import { OpenPanelOptions as OpenPanelOptions$1, OpenPanel as OpenPanel$1, TrackProperties as TrackProperties$1 } from '@openpanel/sdk';
export * from '@openpanel/sdk';
export { OpenPanel as OpenPanelBase } from '@openpanel/sdk';

type OpenPanelOptions = OpenPanelOptions$1 & {
    trackOutgoingLinks?: boolean;
    trackScreenViews?: boolean;
    trackAttributes?: boolean;
    trackHashChanges?: boolean;
};
declare class OpenPanel extends OpenPanel$1 {
    options: OpenPanelOptions;
    private lastPath;
    private debounceTimer;
    constructor(options: OpenPanelOptions);
    private debounce;
    private isServer;
    trackOutgoingLinks(): void;
    trackScreenViews(): void;
    trackAttributes(): void;
    screenView(properties?: TrackProperties$1): void;
    screenView(path: string, properties?: TrackProperties$1): void;
}

type ExposedMethodsNames =
  | 'track'
  | 'identify'
  | 'setGlobalProperties'
  | 'alias'
  | 'increment'
  | 'decrement'
  | 'clear';

type ExposedMethods = {
  [K in ExposedMethodsNames]: OpenPanel[K] extends (...args: any[]) => any
    ? [K, ...Parameters<OpenPanel[K]>]
    : never;
}[ExposedMethodsNames];

type OpenPanelMethodNames = ExposedMethodsNames | 'init' | 'screenView';
type OpenPanelMethods =
  | ExposedMethods
  | ['init', OpenPanelOptions]
  | ['screenView', string | TrackProperties, TrackProperties];

declare global {
  interface Window {
    openpanel?: OpenPanel;
    op: {
      q?: OpenPanelMethods[];
      (...args: OpenPanelMethods): void;
    };
  }
}

export { type ExposedMethods, OpenPanel, type OpenPanelMethodNames, type OpenPanelMethods, type OpenPanelOptions };
