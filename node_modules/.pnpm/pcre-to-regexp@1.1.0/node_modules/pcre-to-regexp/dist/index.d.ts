/**
 * Returns a JavaScript RegExp instance from the given PCRE-compatible string.
 * Flags may be passed in after the final delimiter in the `format` string.
 *
 * An empty array may be passsed in as the second argument, which will be
 * populated with the "named capture group" names as Strings in the Array,
 * once the RegExp has been returned.
 *
 * @param {String} pattern - PCRE regexp string to compile to a JS RegExp
 * @param {Array} [namedCaptures] - optional empty array, which will be populated with the named captures extracted from the PCRE regexp
 * @return {RegExp} returns a JavaScript RegExp instance from the given `pattern` and optionally `flags`
 * @public
 */
declare function createPCRE(pattern: string, namedCaptures?: string[]): createPCRE.PCRE;
declare namespace createPCRE {
    var prototype: PCRE;
}
declare namespace createPCRE {
    interface CharacterClasses {
        [name: string]: string;
    }
    class PCRE extends RegExp {
        pcrePattern: string;
        pcreFlags: string;
        delimiter?: string;
        constructor(pattern: string, flags: string, pcrePattern: string, pcreFlags: string, delimiter?: string);
    }
    /**
     * Mapping of "character class" names to their JS RegExp equivalent.
     * So that /[:digit:]/ gets converted into /\d/, etc.
     *
     * See: http://en.wikipedia.org/wiki/Regular_expression#Character_classes
     */
    const characterClasses: CharacterClasses;
}
export = createPCRE;
