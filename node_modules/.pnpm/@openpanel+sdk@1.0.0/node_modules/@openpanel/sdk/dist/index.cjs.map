{"version":3,"sources":["../index.ts","../src/api.ts","../src/index.ts"],"sourcesContent":["export * from './src/index';\n\n// Deprecated types for beta version of the SDKs\n// Still used in api/event.controller.ts and api/profile.controller.ts\n\nexport interface OpenpanelEventOptions {\n  profileId?: string;\n}\n\nexport interface PostEventPayload {\n  name: string;\n  timestamp: string;\n  profileId?: string;\n  properties?: Record<string, unknown> & OpenpanelEventOptions;\n}\n\nexport interface UpdateProfilePayload {\n  profileId: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  avatar?: string;\n  properties?: Record<string, unknown>;\n}\n\nexport interface IncrementProfilePayload {\n  profileId: string;\n  property: string;\n  value: number;\n}\n\nexport interface DecrementProfilePayload {\n  profileId?: string;\n  property: string;\n  value: number;\n}\n","interface ApiConfig {\n  baseUrl: string;\n  defaultHeaders?: Record<string, string | Promise<string | null>>;\n  maxRetries?: number;\n  initialRetryDelay?: number;\n}\n\ninterface FetchOptions extends RequestInit {\n  retries?: number;\n}\n\nexport class Api {\n  private baseUrl: string;\n  private headers: Record<string, string | Promise<string | null>>;\n  private maxRetries: number;\n  private initialRetryDelay: number;\n\n  constructor(config: ApiConfig) {\n    this.baseUrl = config.baseUrl;\n    this.headers = {\n      'Content-Type': 'application/json',\n      ...config.defaultHeaders,\n    };\n    this.maxRetries = config.maxRetries ?? 3;\n    this.initialRetryDelay = config.initialRetryDelay ?? 500;\n  }\n\n  private async resolveHeaders(): Promise<Record<string, string>> {\n    const resolvedHeaders: Record<string, string> = {};\n    for (const [key, value] of Object.entries(this.headers)) {\n      const resolvedValue = await value;\n      if (resolvedValue !== null) {\n        resolvedHeaders[key] = resolvedValue;\n      }\n    }\n    return resolvedHeaders;\n  }\n\n  public addHeader(key: string, value: string | Promise<string | null>) {\n    this.headers[key] = value;\n  }\n\n  private async post<ReqBody, ResBody>(\n    url: string,\n    data: ReqBody,\n    options: FetchOptions,\n    attempt: number\n  ): Promise<ResBody | null> {\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: await this.resolveHeaders(),\n        body: JSON.stringify(data ?? {}),\n        keepalive: true,\n        ...options,\n      });\n\n      if (response.status === 401) return null;\n\n      if (response.status !== 200 && response.status !== 202) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const responseText = await response.text();\n      return responseText ? JSON.parse(responseText) : null;\n    } catch (error) {\n      if (attempt < this.maxRetries) {\n        const delay = this.initialRetryDelay * Math.pow(2, attempt);\n        await new Promise((resolve) => setTimeout(resolve, delay));\n        return this.post<ReqBody, ResBody>(url, data, options, attempt + 1);\n      }\n      console.error('Max retries reached:', error);\n      return null;\n    }\n  }\n\n  async fetch<ReqBody, ResBody>(\n    path: string,\n    data: ReqBody,\n    options: FetchOptions = {}\n  ): Promise<ResBody | null> {\n    const url = `${this.baseUrl}${path}`;\n    return this.post<ReqBody, ResBody>(url, data, options, 0);\n  }\n}\n","import { Api } from './api';\n\nexport type TrackHandlerPayload =\n  | {\n      type: 'track';\n      payload: TrackPayload;\n    }\n  | {\n      type: 'increment';\n      payload: IncrementPayload;\n    }\n  | {\n      type: 'decrement';\n      payload: DecrementPayload;\n    }\n  | {\n      type: 'alias';\n      payload: AliasPayload;\n    }\n  | {\n      type: 'identify';\n      payload: IdentifyPayload;\n    };\n\nexport type TrackPayload = {\n  name: string;\n  properties?: Record<string, unknown>;\n  profileId?: string;\n};\n\nexport type TrackProperties = {\n  [key: string]: unknown;\n  profileId?: string;\n};\n\nexport type IdentifyPayload = {\n  profileId: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  avatar?: string;\n  properties?: Record<string, unknown>;\n};\n\nexport type AliasPayload = {\n  profileId: string;\n  alias: string;\n};\n\nexport type IncrementPayload = {\n  profileId: string;\n  property: string;\n  value?: number;\n};\n\nexport type DecrementPayload = {\n  profileId: string;\n  property: string;\n  value?: number;\n};\n\nexport type OpenPanelOptions = {\n  clientId: string;\n  clientSecret?: string;\n  apiUrl?: string;\n  sdk?: string;\n  sdkVersion?: string;\n  waitForProfile?: boolean;\n  filter?: (payload: TrackHandlerPayload) => boolean;\n  disabled?: boolean;\n};\n\nexport class OpenPanel {\n  api: Api;\n  profileId?: string;\n  global?: Record<string, unknown>;\n  queue: TrackHandlerPayload[] = [];\n\n  constructor(public options: OpenPanelOptions) {\n    const defaultHeaders: Record<string, string> = {\n      'openpanel-client-id': options.clientId,\n    };\n\n    if (options.clientSecret) {\n      defaultHeaders['openpanel-client-secret'] = options.clientSecret;\n    }\n\n    defaultHeaders['openpanel-sdk-name'] = options.sdk || 'node';\n    defaultHeaders['openpanel-sdk-version'] =\n      options.sdkVersion || process.env.SDK_VERSION!;\n\n    this.api = new Api({\n      baseUrl: options.apiUrl || 'https://api.openpanel.dev',\n      defaultHeaders,\n    });\n  }\n\n  // placeholder for future use\n  init() {\n    // empty\n  }\n\n  ready() {\n    this.options.waitForProfile = false;\n    this.flush();\n  }\n\n  async send(payload: TrackHandlerPayload) {\n    if (this.options.disabled) {\n      return Promise.resolve();\n    }\n\n    if (this.options.filter && !this.options.filter(payload)) {\n      return Promise.resolve();\n    }\n\n    if (this.options.waitForProfile && !this.profileId) {\n      this.queue.push(payload);\n      return Promise.resolve();\n    }\n    return this.api.fetch('/track', payload);\n  }\n\n  setGlobalProperties(properties: Record<string, unknown>) {\n    this.global = {\n      ...this.global,\n      ...properties,\n    };\n  }\n\n  async track(name: string, properties?: TrackProperties) {\n    return this.send({\n      type: 'track',\n      payload: {\n        name,\n        profileId: properties?.profileId ?? this.profileId,\n        properties: {\n          ...(this.global ?? {}),\n          ...(properties ?? {}),\n        },\n      },\n    });\n  }\n\n  async identify(payload: IdentifyPayload) {\n    if (payload.profileId) {\n      this.profileId = payload.profileId;\n      this.flush();\n    }\n\n    if (Object.keys(payload).length > 1) {\n      return this.send({\n        type: 'identify',\n        payload: {\n          ...payload,\n          properties: {\n            ...this.global,\n            ...payload.properties,\n          },\n        },\n      });\n    }\n  }\n\n  async alias(payload: AliasPayload) {\n    return this.send({\n      type: 'alias',\n      payload,\n    });\n  }\n\n  async increment(payload: IncrementPayload) {\n    return this.send({\n      type: 'increment',\n      payload,\n    });\n  }\n\n  async decrement(payload: DecrementPayload) {\n    return this.send({\n      type: 'decrement',\n      payload,\n    });\n  }\n\n  clear() {\n    this.profileId = undefined;\n    // should we force a session end here?\n  }\n\n  flush() {\n    this.queue.forEach((item) => {\n      this.send({\n        ...item,\n        // Not sure why ts-expect-error is needed here\n        // @ts-expect-error\n        payload: {\n          ...item.payload,\n          profileId: item.payload.profileId ?? this.profileId,\n        },\n      });\n    });\n    this.queue = [];\n  }\n}\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,eAAAE,IAAA,eAAAC,EAAAH,GCWO,IAAMI,EAAN,KAAU,CAMf,YAAYC,EAAmB,CAC7B,KAAK,QAAUA,EAAO,QACtB,KAAK,QAAU,CACb,eAAgB,mBAChB,GAAGA,EAAO,cACZ,EACA,KAAK,WAAaA,EAAO,YAAc,EACvC,KAAK,kBAAoBA,EAAO,mBAAqB,GACvD,CAEA,MAAc,gBAAkD,CAC9D,IAAMC,EAA0C,CAAC,EACjD,OAAW,CAACC,EAAKC,CAAK,IAAK,OAAO,QAAQ,KAAK,OAAO,EAAG,CACvD,IAAMC,EAAgB,MAAMD,EACxBC,IAAkB,OACpBH,EAAgBC,CAAG,EAAIE,EAE3B,CACA,OAAOH,CACT,CAEO,UAAUC,EAAaC,EAAwC,CACpE,KAAK,QAAQD,CAAG,EAAIC,CACtB,CAEA,MAAc,KACZE,EACAC,EACAC,EACAC,EACyB,CACzB,GAAI,CACF,IAAMC,EAAW,MAAM,MAAMJ,EAAK,CAChC,OAAQ,OACR,QAAS,MAAM,KAAK,eAAe,EACnC,KAAM,KAAK,UAAUC,GAAQ,CAAC,CAAC,EAC/B,UAAW,GACX,GAAGC,CACL,CAAC,EAED,GAAIE,EAAS,SAAW,IAAK,OAAO,KAEpC,GAAIA,EAAS,SAAW,KAAOA,EAAS,SAAW,IACjD,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAG1D,IAAMC,EAAe,MAAMD,EAAS,KAAK,EACzC,OAAOC,EAAe,KAAK,MAAMA,CAAY,EAAI,IACnD,OAASC,EAAO,CACd,GAAIH,EAAU,KAAK,WAAY,CAC7B,IAAMI,EAAQ,KAAK,kBAAoB,KAAK,IAAI,EAAGJ,CAAO,EAC1D,aAAM,IAAI,QAASK,GAAY,WAAWA,EAASD,CAAK,CAAC,EAClD,KAAK,KAAuBP,EAAKC,EAAMC,EAASC,EAAU,CAAC,CACpE,CACA,eAAQ,MAAM,uBAAwBG,CAAK,EACpC,IACT,CACF,CAEA,MAAM,MACJG,EACAR,EACAC,EAAwB,CAAC,EACA,CACzB,IAAMF,EAAM,GAAG,KAAK,OAAO,GAAGS,CAAI,GAClC,OAAO,KAAK,KAAuBT,EAAKC,EAAMC,EAAS,CAAC,CAC1D,CACF,ECZO,IAAMQ,EAAN,KAAgB,CAMrB,YAAmBC,EAA2B,CAA3B,aAAAA,EAFnB,WAA+B,CAAC,EAG9B,IAAMC,EAAyC,CAC7C,sBAAuBD,EAAQ,QACjC,EAEIA,EAAQ,eACVC,EAAe,yBAAyB,EAAID,EAAQ,cAGtDC,EAAe,oBAAoB,EAAID,EAAQ,KAAO,OACtDC,EAAe,uBAAuB,EACpCD,EAAQ,YAAc,QAExB,KAAK,IAAM,IAAIE,EAAI,CACjB,QAASF,EAAQ,QAAU,4BAC3B,eAAAC,CACF,CAAC,CACH,CAGA,MAAO,CAEP,CAEA,OAAQ,CACN,KAAK,QAAQ,eAAiB,GAC9B,KAAK,MAAM,CACb,CAEA,MAAM,KAAKE,EAA8B,CAKvC,OAJI,KAAK,QAAQ,UAIb,KAAK,QAAQ,QAAU,CAAC,KAAK,QAAQ,OAAOA,CAAO,EAC9C,QAAQ,QAAQ,EAGrB,KAAK,QAAQ,gBAAkB,CAAC,KAAK,WACvC,KAAK,MAAM,KAAKA,CAAO,EAChB,QAAQ,QAAQ,GAElB,KAAK,IAAI,MAAM,SAAUA,CAAO,CACzC,CAEA,oBAAoBC,EAAqC,CACvD,KAAK,OAAS,CACZ,GAAG,KAAK,OACR,GAAGA,CACL,CACF,CAEA,MAAM,MAAMC,EAAcD,EAA8B,CACtD,OAAO,KAAK,KAAK,CACf,KAAM,QACN,QAAS,CACP,KAAAC,EACA,UAAWD,GAAY,WAAa,KAAK,UACzC,WAAY,CACV,GAAI,KAAK,QAAU,CAAC,EACpB,GAAIA,GAAc,CAAC,CACrB,CACF,CACF,CAAC,CACH,CAEA,MAAM,SAASD,EAA0B,CAMvC,GALIA,EAAQ,YACV,KAAK,UAAYA,EAAQ,UACzB,KAAK,MAAM,GAGT,OAAO,KAAKA,CAAO,EAAE,OAAS,EAChC,OAAO,KAAK,KAAK,CACf,KAAM,WACN,QAAS,CACP,GAAGA,EACH,WAAY,CACV,GAAG,KAAK,OACR,GAAGA,EAAQ,UACb,CACF,CACF,CAAC,CAEL,CAEA,MAAM,MAAMA,EAAuB,CACjC,OAAO,KAAK,KAAK,CACf,KAAM,QACN,QAAAA,CACF,CAAC,CACH,CAEA,MAAM,UAAUA,EAA2B,CACzC,OAAO,KAAK,KAAK,CACf,KAAM,YACN,QAAAA,CACF,CAAC,CACH,CAEA,MAAM,UAAUA,EAA2B,CACzC,OAAO,KAAK,KAAK,CACf,KAAM,YACN,QAAAA,CACF,CAAC,CACH,CAEA,OAAQ,CACN,KAAK,UAAY,MAEnB,CAEA,OAAQ,CACN,KAAK,MAAM,QAASG,GAAS,CAC3B,KAAK,KAAK,CACR,GAAGA,EAGH,QAAS,CACP,GAAGA,EAAK,QACR,UAAWA,EAAK,QAAQ,WAAa,KAAK,SAC5C,CACF,CAAC,CACH,CAAC,EACD,KAAK,MAAQ,CAAC,CAChB,CACF","names":["sdk_exports","__export","OpenPanel","__toCommonJS","Api","config","resolvedHeaders","key","value","resolvedValue","url","data","options","attempt","response","responseText","error","delay","resolve","path","OpenPanel","options","defaultHeaders","Api","payload","properties","name","item"]}