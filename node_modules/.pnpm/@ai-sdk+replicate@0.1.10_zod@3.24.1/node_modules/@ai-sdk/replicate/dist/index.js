"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  createReplicate: () => createReplicate,
  replicate: () => replicate
});
module.exports = __toCommonJS(src_exports);

// src/replicate-provider.ts
var import_provider = require("@ai-sdk/provider");
var import_provider_utils3 = require("@ai-sdk/provider-utils");

// src/replicate-image-model.ts
var import_provider_utils2 = require("@ai-sdk/provider-utils");
var import_zod2 = require("zod");

// src/replicate-error.ts
var import_provider_utils = require("@ai-sdk/provider-utils");
var import_zod = require("zod");
var replicateErrorSchema = import_zod.z.object({
  detail: import_zod.z.string().optional(),
  error: import_zod.z.string().optional()
});
var replicateFailedResponseHandler = (0, import_provider_utils.createJsonErrorResponseHandler)({
  errorSchema: replicateErrorSchema,
  errorToMessage: (error) => {
    var _a, _b;
    return (_b = (_a = error.detail) != null ? _a : error.error) != null ? _b : "Unknown Replicate error";
  }
});

// src/replicate-image-model.ts
var ReplicateImageModel = class {
  constructor(modelId, settings, config) {
    this.modelId = modelId;
    this.settings = settings;
    this.config = config;
    this.specificationVersion = "v1";
  }
  get provider() {
    return this.config.provider;
  }
  get maxImagesPerCall() {
    var _a;
    return (_a = this.settings.maxImagesPerCall) != null ? _a : 1;
  }
  async doGenerate({
    prompt,
    n,
    aspectRatio,
    size,
    seed,
    providerOptions,
    headers,
    abortSignal
  }) {
    var _a, _b, _c, _d;
    const warnings = [];
    const [modelId, version] = this.modelId.split(":");
    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();
    const {
      value: { output },
      responseHeaders
    } = await (0, import_provider_utils2.postJsonToApi)({
      url: (
        // different endpoints for versioned vs unversioned models:
        version != null ? `${this.config.baseURL}/predictions` : `${this.config.baseURL}/models/${modelId}/predictions`
      ),
      headers: (0, import_provider_utils2.combineHeaders)(await (0, import_provider_utils2.resolve)(this.config.headers), headers, {
        prefer: "wait"
      }),
      body: {
        input: {
          prompt,
          aspect_ratio: aspectRatio,
          size,
          seed,
          num_outputs: n,
          ...(_d = providerOptions.replicate) != null ? _d : {}
        },
        // for versioned models, include the version in the body:
        ...version != null ? { version } : {}
      },
      successfulResponseHandler: (0, import_provider_utils2.createJsonResponseHandler)(
        replicateImageResponseSchema
      ),
      failedResponseHandler: replicateFailedResponseHandler,
      abortSignal,
      fetch: this.config.fetch
    });
    const outputArray = Array.isArray(output) ? output : [output];
    const images = await Promise.all(
      outputArray.map(async (url) => {
        const { value: image } = await (0, import_provider_utils2.getFromApi)({
          url,
          successfulResponseHandler: (0, import_provider_utils2.createBinaryResponseHandler)(),
          failedResponseHandler: replicateFailedResponseHandler,
          abortSignal,
          fetch: this.config.fetch
        });
        return image;
      })
    );
    return {
      images,
      warnings,
      response: {
        timestamp: currentDate,
        modelId: this.modelId,
        headers: responseHeaders
      }
    };
  }
};
var replicateImageResponseSchema = import_zod2.z.object({
  output: import_zod2.z.union([import_zod2.z.array(import_zod2.z.string()), import_zod2.z.string()])
});

// src/replicate-provider.ts
function createReplicate(options = {}) {
  const createImageModel = (modelId, settings) => {
    var _a;
    return new ReplicateImageModel(modelId, settings != null ? settings : {}, {
      provider: "replicate",
      baseURL: (_a = options.baseURL) != null ? _a : "https://api.replicate.com/v1",
      headers: {
        Authorization: `Bearer ${(0, import_provider_utils3.loadApiKey)({
          apiKey: options.apiToken,
          environmentVariableName: "REPLICATE_API_TOKEN",
          description: "Replicate"
        })}`,
        ...options.headers
      },
      fetch: options.fetch
    });
  };
  return {
    image: createImageModel,
    imageModel: createImageModel,
    languageModel: () => {
      throw new import_provider.NoSuchModelError({
        modelId: "languageModel",
        modelType: "languageModel"
      });
    },
    textEmbeddingModel: () => {
      throw new import_provider.NoSuchModelError({
        modelId: "textEmbeddingModel",
        modelType: "textEmbeddingModel"
      });
    }
  };
}
var replicate = createReplicate();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createReplicate,
  replicate
});
//# sourceMappingURL=index.js.map