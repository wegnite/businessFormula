import { ImageModelV1, ProviderV1 } from '@ai-sdk/provider';
import { Resolvable, FetchFunction } from '@ai-sdk/provider-utils';

type ReplicateImageModelId = 'black-forest-labs/flux-1.1-pro' | 'black-forest-labs/flux-1.1-pro-ultra' | 'black-forest-labs/flux-dev' | 'black-forest-labs/flux-pro' | 'black-forest-labs/flux-schnell' | 'bytedance/sdxl-lightning-4step' | 'fofr/aura-flow' | 'fofr/latent-consistency-model' | 'fofr/realvisxl-v3-multi-controlnet-lora' | 'fofr/sdxl-emoji' | 'fofr/sdxl-multi-controlnet-lora' | 'ideogram-ai/ideogram-v2' | 'ideogram-ai/ideogram-v2-turbo' | 'lucataco/dreamshaper-xl-turbo' | 'lucataco/open-dalle-v1.1' | 'lucataco/realvisxl-v2.0' | 'lucataco/realvisxl2-lcm' | 'luma/photon' | 'luma/photon-flash' | 'nvidia/sana' | 'playgroundai/playground-v2.5-1024px-aesthetic' | 'recraft-ai/recraft-v3' | 'recraft-ai/recraft-v3-svg' | 'stability-ai/stable-diffusion-3.5-large' | 'stability-ai/stable-diffusion-3.5-large-turbo' | 'stability-ai/stable-diffusion-3.5-medium' | 'tstramer/material-diffusion' | (string & {});
interface ReplicateImageSettings {
    /**
  Override the maximum number of images per call (default 1)
     */
    maxImagesPerCall?: number;
}

interface ReplicateImageModelConfig {
    provider: string;
    baseURL: string;
    headers?: Resolvable<Record<string, string | undefined>>;
    fetch?: FetchFunction;
    _internal?: {
        currentDate?: () => Date;
    };
}
declare class ReplicateImageModel implements ImageModelV1 {
    readonly modelId: ReplicateImageModelId;
    private readonly settings;
    private readonly config;
    readonly specificationVersion = "v1";
    get provider(): string;
    get maxImagesPerCall(): number;
    constructor(modelId: ReplicateImageModelId, settings: ReplicateImageSettings, config: ReplicateImageModelConfig);
    doGenerate({ prompt, n, aspectRatio, size, seed, providerOptions, headers, abortSignal, }: Parameters<ImageModelV1['doGenerate']>[0]): Promise<Awaited<ReturnType<ImageModelV1['doGenerate']>>>;
}

interface ReplicateProviderSettings {
    /**
  API token that is being send using the `Authorization` header.
  It defaults to the `REPLICATE_API_TOKEN` environment variable.
     */
    apiToken?: string;
    /**
  Use a different URL prefix for API calls, e.g. to use proxy servers.
  The default prefix is `https://api.replicate.com/v1`.
     */
    baseURL?: string;
    /**
  Custom headers to include in the requests.
       */
    headers?: Record<string, string>;
    /**
  Custom fetch implementation. You can use it as a middleware to intercept requests,
  or to provide a custom fetch implementation for e.g. testing.
      */
    fetch?: FetchFunction;
}
interface ReplicateProvider extends ProviderV1 {
    /**
     * Creates a Replicate image generation model.
     */
    image(modelId: ReplicateImageModelId, settings?: ReplicateImageSettings): ReplicateImageModel;
    /**
     * Creates a Replicate image generation model.
     */
    imageModel(modelId: ReplicateImageModelId, settings?: ReplicateImageSettings): ReplicateImageModel;
}
/**
 * Create a Replicate provider instance.
 */
declare function createReplicate(options?: ReplicateProviderSettings): ReplicateProvider;
/**
 * Default Replicate provider instance.
 */
declare const replicate: ReplicateProvider;

export { type ReplicateProvider, type ReplicateProviderSettings, createReplicate, replicate };
