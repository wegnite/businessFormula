var isStickySupported = typeof /./g.sticky === 'boolean';
var _pattern = function (input) {
  if (typeof input === 'function') {
    return input;
  }

  var source = typeof input !== 'string' ? input.source : input;
  return isStickySupported ? new RegExp(source, 'y') : new RegExp("^(?:" + source + ")", 'g');
};
var _substr = function (state, pattern) {
  var end = state.index + pattern.length;
  var sub = state.input.slice(state.index, end);

  if (sub === pattern) {
    state.index = end;
    return sub;
  }
};
var _exec = function (state, pattern) {
  if (typeof pattern === 'function') {
    return pattern();
  }

  var match;

  if (isStickySupported) {
    pattern.lastIndex = state.index;
    match = pattern.exec(state.input);
    state.index = pattern.lastIndex;
  } else {
    pattern.lastIndex = 0;
    match = pattern.exec(state.input.slice(state.input));
    state.index += pattern.lastIndex;
  }

  return match && match[0];
};
var tag = function (array, tag) {
  array.tag = tag;
  return array;
};
var parse = function (pattern) {
  return function (input) {
    var state = {
      input: input,
      index: 0
    };
    return pattern(state);
  };
};
var match = function (_name) {
  throw new TypeError('This match() function was not transformed. ' + 'Ensure that the Babel plugin is set up correctly and try again.');
};

exports._exec = _exec;
exports._pattern = _pattern;
exports._substr = _substr;
exports.match = match;
exports.parse = parse;
exports.tag = tag;
//# sourceMappingURL=reghex-core.js.map
